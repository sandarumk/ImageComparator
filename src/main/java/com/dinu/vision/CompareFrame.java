/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dinu.vision;

import com.dinu.image.*;
import com.dinu.model.Matches;
import com.dinu.model.PxToPxResult;
import org.openimaj.image.DisplayUtilities;
import org.openimaj.image.ImageUtilities;
import org.openimaj.image.MBFImage;
import org.openimaj.image.colour.RGBColour;
import org.openimaj.image.typography.hershey.HersheyFont;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * @author Dinu
 */
public class CompareFrame extends javax.swing.JFrame {

    BufferedImage designImage;
    BufferedImage actualImage;

    BufferedImage designImageOriginal;
    BufferedImage actualImageOriginal;

    PxToPxResult pxResult;

    ArrayList<BlobFinder.Blob> designBlobList;
    ArrayList<BlobFinder.Blob> actualBlobList;

    /**
     * Creates new form CompareFrame
     */
    public CompareFrame() {
        initComponents();
        setStatus("Status", false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDesign = new javax.swing.JPanel();
        panelActual = new javax.swing.JPanel();
        openDesign = new javax.swing.JButton();
        openActual = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();
        pixeltopixelPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();
        labelSimilar = new javax.swing.JLabel();
        labelDifferent = new javax.swing.JLabel();
        labelDifferentPercent = new javax.swing.JLabel();
        layoutPanel = new javax.swing.JPanel();
        chkGrayscale = new javax.swing.JCheckBox();
        chkBlobDetection = new javax.swing.JCheckBox();
        chkEdgeDetection = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        labelLocalFeatureDiff = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        chkMeanShift = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        labelMeanShiftUnmatch = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        labelMeanShiftMatched = new javax.swing.JLabel();
        chkRemoveTexts = new javax.swing.JCheckBox();
        buttonApply = new javax.swing.JButton();
        buttonRevert = new javax.swing.JButton();
        lblAnimation = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelDesign.setBackground(new java.awt.Color(102, 102, 102));
        panelDesign.setPreferredSize(new java.awt.Dimension(426, 266));
        panelDesign.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelDesignMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelDesignLayout = new javax.swing.GroupLayout(panelDesign);
        panelDesign.setLayout(panelDesignLayout);
        panelDesignLayout.setHorizontalGroup(
                panelDesignLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        panelDesignLayout.setVerticalGroup(
                panelDesignLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 285, Short.MAX_VALUE)
        );

        panelActual.setBackground(new java.awt.Color(102, 102, 102));
        panelActual.setPreferredSize(new java.awt.Dimension(426, 266));
        panelActual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelActualMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelActualLayout = new javax.swing.GroupLayout(panelActual);
        panelActual.setLayout(panelActualLayout);
        panelActualLayout.setHorizontalGroup(
                panelActualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        panelActualLayout.setVerticalGroup(
                panelActualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        openDesign.setText("Open");
        openDesign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDesignActionPerformed(evt);
            }
        });

        openActual.setText("Open");
        openActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActualActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Pixels");

        jLabel2.setText("Similar");

        jLabel3.setText("Different");

        jLabel4.setText("Different (%)");

        labelSimilar.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelSimilar.setLabelFor(jLabel2);
        labelSimilar.setText("0");

        labelDifferent.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelDifferent.setLabelFor(jLabel3);
        labelDifferent.setText("0");

        labelDifferentPercent.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelDifferentPercent.setLabelFor(jLabel4);
        labelDifferentPercent.setText("0");

        javax.swing.GroupLayout pixeltopixelPanelLayout = new javax.swing.GroupLayout(pixeltopixelPanel);
        pixeltopixelPanel.setLayout(pixeltopixelPanelLayout);
        pixeltopixelPanelLayout.setHorizontalGroup(
                pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pixeltopixelPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                                .addGap(34, 34, 34)
                                .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(labelSimilar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(labelDifferent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(labelDifferentPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(labelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(448, Short.MAX_VALUE))
        );
        pixeltopixelPanelLayout.setVerticalGroup(
                pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pixeltopixelPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(labelSimilar))
                                .addGap(18, 18, 18)
                                .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(labelDifferent))
                                .addGap(18, 18, 18)
                                .addGroup(pixeltopixelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(labelDifferentPercent))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Pixel to Pixel", pixeltopixelPanel);

        chkGrayscale.setText("Grayscale");
        chkGrayscale.setActionCommand("");

        chkBlobDetection.setText("Blob Detection");
        chkBlobDetection.setToolTipText("");
        chkBlobDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBlobDetectionActionPerformed(evt);
            }
        });

        chkEdgeDetection.setText("Edge Detection");
        chkEdgeDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEdgeDetectionActionPerformed(evt);
            }
        });

        jPanel1.setName(""); // NOI18N

        jCheckBox1.setText("Local feature points");

        labelLocalFeatureDiff.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelLocalFeatureDiff.setLabelFor(jLabel2);
        labelLocalFeatureDiff.setText("0");

        jLabel5.setText("Diff %");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCheckBox1)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(117, 117, 117)
                                                .addComponent(labelLocalFeatureDiff, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelLocalFeatureDiff)
                                        .addComponent(jLabel5))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkMeanShift.setText("Mean-shift tracking");
        chkMeanShift.setToolTipText("");
        chkMeanShift.setActionCommand("");
        chkMeanShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMeanShiftActionPerformed(evt);
            }
        });

        jLabel6.setText("Unmatched %");

        labelMeanShiftUnmatch.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelMeanShiftUnmatch.setLabelFor(jLabel2);
        labelMeanShiftUnmatch.setText("0");

        jLabel7.setText("Matched Diff %");

        labelMeanShiftMatched.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelMeanShiftMatched.setLabelFor(jLabel2);
        labelMeanShiftMatched.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chkMeanShift)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel7))
                                                .addGap(117, 117, 117)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(labelMeanShiftMatched, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(labelMeanShiftUnmatch, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(chkMeanShift)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelMeanShiftUnmatch)
                                        .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelMeanShiftMatched)
                                        .addComponent(jLabel7))
                                .addContainerGap(18, Short.MAX_VALUE))
        );

        chkRemoveTexts.setText("Remove texts");

        javax.swing.GroupLayout layoutPanelLayout = new javax.swing.GroupLayout(layoutPanel);
        layoutPanel.setLayout(layoutPanelLayout);
        layoutPanelLayout.setHorizontalGroup(
                layoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layoutPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chkGrayscale)
                                        .addComponent(chkBlobDetection)
                                        .addComponent(chkEdgeDetection)
                                        .addComponent(chkRemoveTexts))
                                .addGap(74, 74, 74)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(77, Short.MAX_VALUE))
        );
        layoutPanelLayout.setVerticalGroup(
                layoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layoutPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layoutPanelLayout.createSequentialGroup()
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 27, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(layoutPanelLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(chkGrayscale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkEdgeDetection)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkRemoveTexts)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkBlobDetection)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Layout", layoutPanel);

        buttonApply.setText("Apply");
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        buttonRevert.setText("Revert");
        buttonRevert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRevertActionPerformed(evt);
            }
        });

        lblAnimation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loading_transparent.gif")));

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblStatus.setText("Status");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(panelDesign, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelActual, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addComponent(openDesign)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(openActual)
                                .addGap(192, 192, 192))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tabPanel)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(buttonApply, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonRevert, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(openDesign)
                                        .addComponent(openActual))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(panelDesign, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                        .addComponent(panelActual, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonApply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonRevert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12))
        );

        tabPanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openDesignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDesignActionPerformed
        openImage(0);
    }//GEN-LAST:event_openDesignActionPerformed

    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed

        if (designImage != null && actualImage != null) {

            setStatus("Applying", true);
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                public Void doInBackground() {
                    // perform operation
                    doOperation();
                    return null;
                }

                @Override
                public void done() {
                    updateUI();
                    setStatus("Finished", false);
                    buttonApply.setEnabled(true);
                }
            };
            worker.execute();
        } else if (designImage == null) {
            JOptionPane.showMessageDialog(this, "Open design image first before applying", "No image", JOptionPane.INFORMATION_MESSAGE);
            openImage(0);
        } else if (actualImage == null) {
            JOptionPane.showMessageDialog(this, "Open actual image first before applying", "No image", JOptionPane.INFORMATION_MESSAGE);
            openImage(1);
        }
    }//GEN-LAST:event_buttonApplyActionPerformed

    private void buttonRevertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRevertActionPerformed
        designImage = ImageUtil.duplicateImage(designImageOriginal);
        actualImage = ImageUtil.duplicateImage(actualImageOriginal);
        updateUI();
    }//GEN-LAST:event_buttonRevertActionPerformed

    private void openActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActualActionPerformed
        openImage(1);
    }//GEN-LAST:event_openActualActionPerformed

    private void chkBlobDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBlobDetectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkBlobDetectionActionPerformed

    private void panelDesignMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDesignMouseClicked
        displayBufferedImage(designImage, "Design");
//        ZoomPane zoomPane = new ZoomPane(designImage);
    }//GEN-LAST:event_panelDesignMouseClicked

    private void panelActualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelActualMouseClicked
        displayBufferedImage(actualImage, "Actual");
//        ZoomPane zoomPane = new ZoomPane(actualImage);
    }//GEN-LAST:event_panelActualMouseClicked

    private void chkEdgeDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEdgeDetectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkEdgeDetectionActionPerformed

    private void chkMeanShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMeanShiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMeanShiftActionPerformed

    private void doOperation() {
        int index = tabPanel.getSelectedIndex();
        boolean isSelected = false;
        try {
            switch (index) {
                case 0:
                    isSelected = true;
                    comparePixelToPixel();
                    break;
                case 1:
                    if (chkGrayscale.isSelected()) {
                        setStatus("Grayscale", true);
                        makeGrayscale();
                        isSelected = true;
                    }
                    if (chkEdgeDetection.isSelected()) {
                        setStatus("Detecting Edge", true);
                        detectEdge();
                        isSelected = true;
                    }
                    if (chkRemoveTexts.isSelected()) {
                        setStatus("Removing Texts", true);
                        removeTexts();
                        isSelected = true;
                    }
                    if (chkBlobDetection.isSelected()) {
                        setStatus("Detecting Blobs", true);
                        detectBlob();
                        isSelected = true;
                    }
                    if (chkMeanShift.isSelected()) {
                        if (!chkBlobDetection.isSelected()) {
                            setStatus("Detecting Blobs", true);
                            detectBlob();
                        }
                        setStatus("Processing Mean-shift Tracking", true);
                        processMeanShift();
                        isSelected = true;
                    }
                    if (jCheckBox1.isSelected()) {
                        setStatus("Processing Local features", true);
                        compareLocalFeatures();
                        isSelected = true;
                    }
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setStatus(String status, boolean isBusy) {
        lblStatus.setText(status + (isBusy ? "..." : "."));
        lblAnimation.setVisible(isBusy);
        buttonApply.setEnabled(!isBusy);
        buttonRevert.setEnabled(!isBusy);
    }

    private void updateUI() {
        if (designImage != null) {
            new ImageViewer(designImage, panelDesign);
        }
        if (actualImage != null) {
            new ImageViewer(actualImage, panelActual);
        }
        if (pxResult != null) {
            labelTotal.setText(String.format("Design pixels: %d  Actual pixels: %d", pxResult.totalDesign, pxResult.totalActual));
            if (pxResult.getMsg() != null) {
                JOptionPane.showMessageDialog(this, pxResult.getMsg(), "Pixel To Pixel Error", JOptionPane.ERROR_MESSAGE);
            }
            labelSimilar.setText("" + pxResult.similar);
            labelDifferent.setText("" + pxResult.difference);
            double percent = pxResult.difference * 100.0 / pxResult.totalDesign;
            labelDifferentPercent.setText("" + Math.round(percent * 100) / 100.0);
            pxResult = null;
        }
        repaint();
    }

    private void openImage(int imageType) {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Images (jpg, gif, png, bmp)", "jpg", "gif", "png", "bmp");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File("."));
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            if (imageType == 0) {
                designImageOriginal = ImageStorage.openImage(path);
                designImage = ImageUtil.duplicateImage(designImageOriginal);
            } else {
                actualImageOriginal = ImageStorage.openImage(path);
                actualImage = ImageUtil.duplicateImage(actualImageOriginal);
            }
            updateUI();
            repaint();
        }
    }

    private void setTab(int index) {
        if (tabPanel.getTabCount() > index) {
            tabPanel.setSelectedIndex(index);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompareFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompareFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApply;
    private javax.swing.JButton buttonRevert;
    private javax.swing.JCheckBox chkBlobDetection;
    private javax.swing.JCheckBox chkEdgeDetection;
    private javax.swing.JCheckBox chkGrayscale;
    private javax.swing.JCheckBox chkMeanShift;
    private javax.swing.JCheckBox chkRemoveTexts;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelDifferent;
    private javax.swing.JLabel labelDifferentPercent;
    private javax.swing.JLabel labelLocalFeatureDiff;
    private javax.swing.JLabel labelMeanShiftMatched;
    private javax.swing.JLabel labelMeanShiftUnmatch;
    private javax.swing.JLabel labelSimilar;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JPanel layoutPanel;
    private javax.swing.JLabel lblAnimation;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JButton openActual;
    private javax.swing.JButton openDesign;
    private javax.swing.JPanel panelActual;
    private javax.swing.JPanel panelDesign;
    private javax.swing.JPanel pixeltopixelPanel;
    private javax.swing.JTabbedPane tabPanel;
    // End of variables declaration//GEN-END:variables

    private void comparePixelToPixel() {
        PxToPxResult result = PxToPxOperation.apply(designImage, actualImage);
        actualImage = result.modified;
        pxResult = result;
    }

    private void makeGrayscale() {
        designImage = PointOperation.averageGrayscale(designImage);
        actualImage = PointOperation.averageGrayscale(actualImage);
    }

    private void detectEdge() {
        designImage = EdgeDetection.applySobelBoth(designImage);
        actualImage = EdgeDetection.applySobelBoth(actualImage);
    }

    private void removeTexts() {
        designImage = FeatureCompare.removeTexts(designImage);
        actualImage = FeatureCompare.removeTexts(actualImage);
    }

    private void detectBlob() {
        designBlobList = new ArrayList<BlobFinder.Blob>();
        actualBlobList = new ArrayList<BlobFinder.Blob>();
        designImage = addPadding(designImage);
        actualImage = addPadding(actualImage);
        designImage = identifyBlobs(designImage, designBlobList);
        actualImage = identifyBlobs(actualImage, actualBlobList);
    }

    private BufferedImage addPadding(BufferedImage designImage) {
        return ImageUtil.addPadding(designImage, ImageUtil.colorToRGB(255, 255, 255, 255));
//        return ImageUtil.addPadding(designImage, ImageUtil.colorToRGB(255, 0, 0, 0));
    }

    private BufferedImage identifyBlobs(BufferedImage bufImage, ArrayList<BlobFinder.Blob> blobList) {
        BlobFinder blobFinder = new BlobFinder(bufImage.getWidth(), bufImage.getHeight());
        blobFinder.detectBlobs(bufImage, 0, -1, (byte) 0, blobList);
        System.out.println("blob list size:" + blobList.size());
//        for (BlobFinder.Blob blob : blobList) {
//            System.out.println(blob);
//        }
        if (blobList.size() > 0) {
            return blobFinder.getDstImage();
        } else {
            return bufImage;
        }
    }

    private void processMeanShift() {
        ArrayList<BlobFinder.Blob> designDiffs;
        ArrayList<Matches> matchesList;
        if (designBlobList != null && actualBlobList != null && !designBlobList.isEmpty()) {
            designDiffs = new ArrayList<>(designBlobList);
            matchesList = BlobUtil.processMeanShift(designDiffs, new ArrayList<>(actualBlobList));

            System.out.println("Diffs List:");
            for (BlobFinder.Blob blob : designDiffs) {
                showRegion(designImage, blob, Color.RED.getRGB(), -1);
                System.out.println(blob);
            }

            System.out.println("Matched List:");
            int count = 0;
            for (Matches match : matchesList) {
                ++count;
                double dist = BlobUtil.meanShiftDistance(match.getBlob1(), match.getBlob2());
                System.out.println(match + " dis=" + dist + " class=" + count);
                Random generator = new Random();
                int color = new Color(generator.nextInt(255), generator.nextInt(255), generator.nextInt(255)).getRGB();
                showRegion(designImage, match.getBlob1(), color, count);
                showRegion(actualImage, match.getBlob2(), color, count);
            }

            double sumDiff = 0.0;
            int sumMass = 0;
            double maxDiff = 0;
            {
                int width = designImage.getWidth();
                int height = designImage.getHeight();

                //calculate maxDiff using  blob1 as (0,0) and blob2 as (w,h). mass=0
                BlobFinder.Blob blob1 = new BlobFinder.Blob(0, 0, 0, 0, 0);
                BlobFinder.Blob blob2 = new BlobFinder.Blob(width, width, height, height, 0);
                maxDiff = BlobUtil.meanShiftDistance(blob1, blob2);
            }

            for (Matches match : matchesList) {
                double distanceDifference = BlobUtil.meanShiftDistance(match.getBlob1(), match.getBlob2());
                int mass = match.getBlob1().mass;
                sumDiff += distanceDifference * mass;
                sumMass += mass;
            }

            for (BlobFinder.Blob blob : designDiffs) {
                int mass = blob.mass;
                sumDiff += maxDiff * mass;
                sumMass += mass;
            }

            double finalPercentage = sumDiff * 100 / (sumMass * maxDiff);
            labelMeanShiftUnmatch.setText("" + finalPercentage);
            // labelMeanShiftUnmatch.setText("" + Math.round((designBlobList.size() - matchesList.size()) * 10000 / designBlobList.size()) / 100.0);
            // labelMeanShiftMatched.setText("" + Math.round((diffPer) * 100) / 100.0);
        } else {
            System.out.println("No blobs found in design image");
        }
    }

    private boolean blobEqual(BlobFinder.Blob blob1, BlobFinder.Blob blob2) {
        return blob1.xMin == blob2.xMin && blob1.xMax == blob2.xMax
                && blob1.yMin == blob2.yMin && blob1.yMax == blob2.yMax
                && blob1.mass == blob2.mass;
    }

    private void showRegion(BufferedImage design, BlobFinder.Blob blob, int color, int index) {
        for (int i = blob.xMin; i <= blob.xMax; i++) {
            for (int j = blob.yMin; j <= blob.yMax; j++) {
                design.setRGB(i, j, color);
            }
        }
        final MBFImage image = ImageUtilities.createMBFImage(design, false);
        image.drawText(String.valueOf(index), blob.xMin, blob.yMax, HersheyFont.CURSIVE, 15, RGBColour.WHITE);
        image.drawText(String.valueOf(index), (blob.xMax + blob.xMin) / 2, blob.yMax, HersheyFont.CURSIVE, 15, RGBColour.BLACK);
//        DisplayUtilities.display(image);
        BufferedImage newDesign = ImageUtilities.createBufferedImageForDisplay(image);
        for (int i = blob.xMin; i <= blob.xMax; i++) {
            for (int j = blob.yMin; j <= blob.yMax; j++) {
                design.setRGB(i, j, newDesign.getRGB(i, j));
            }
        }
    }

    private void compareLocalFeatures() {
        double compareFeatures = new FeatureCompare().compareFeatures(designImage, actualImage,
                FeatureCompare.FeatureEngine.GSIFT,
                FeatureCompare.FeatureMatcher.ConsistentLocalFeatureMatcher2d,
                true);
        labelLocalFeatureDiff.setText(String.valueOf("" + Math.round(compareFeatures * 100) / 100.0));
    }

    private void displayBufferedImage(BufferedImage bufferedImage, String title) {
        if (bufferedImage != null) {
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            JFrame frame = new JFrame(title);
            frame.setBounds(0, 0, screenSize.width / 2, screenSize.height - 100);
            DisplayUtilities.display(bufferedImage, frame);
        }
    }
}
