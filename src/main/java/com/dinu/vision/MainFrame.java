/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Jan 27, 2013, 7:38:21 PM
 */
package com.dinu.vision;

import com.dinu.image.CannyEdgeDetector;
import com.dinu.image.EdgeDetection;
import com.dinu.image.Histogram;
import com.dinu.image.HoughTransform;
import com.dinu.image.ImageStorage;
import com.dinu.image.ImageUtil;
import com.dinu.image.ImageViewer;
import com.dinu.image.NoiseReduction;
import com.dinu.image.PointOperation;
import com.dinu.image.Representation;
import com.dinu.image.Segmentation;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Dinu
 */
public class MainFrame extends javax.swing.JFrame {

    BufferedImage originalImage;
    BufferedImage modifiedImage;
    private static JFrame jFrameChain;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setStatus("Status", false);
        tabPanel.remove(5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        panelOld = new javax.swing.JPanel();
        panelNew = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tabPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        pointCheckRotateLeft = new javax.swing.JCheckBox();
        pointCheckFlipVertical = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pointCropX = new javax.swing.JTextField();
        pointCropY = new javax.swing.JTextField();
        pointCropWidth = new javax.swing.JTextField();
        pointCropHeight = new javax.swing.JTextField();
        pointCheckCrop = new javax.swing.JCheckBox();
        pointCheckNegative = new javax.swing.JCheckBox();
        pointCheckNormalize = new javax.swing.JCheckBox();
        pointCheckGrayscale = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        scaleTextWidth = new javax.swing.JTextField();
        scaleTextHeight = new javax.swing.JTextField();
        scaleCheckNearestNeighbour = new javax.swing.JCheckBox();
        scaleCheckBilinear = new javax.swing.JCheckBox();
        scaleCheckBiCubic = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        noiseCheckMean3 = new javax.swing.JCheckBox();
        noiseCheckMean5 = new javax.swing.JCheckBox();
        noiseCheckThreshold = new javax.swing.JCheckBox();
        noiseTextThreshold = new javax.swing.JTextField();
        noiseCheckMedian = new javax.swing.JCheckBox();
        noiseCheckMedianWeighted = new javax.swing.JCheckBox();
        noiseCheckAlphaTrimmed = new javax.swing.JCheckBox();
        noiseCheckMid = new javax.swing.JCheckBox();
        noiseCheckMax = new javax.swing.JCheckBox();
        noiseCheckMin = new javax.swing.JCheckBox();
        noiseTextAlphaP = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        edgeCheckSobelX = new javax.swing.JCheckBox();
        edgeCheckSobelY = new javax.swing.JCheckBox();
        edgeSobelBoth = new javax.swing.JCheckBox();
        edgeCheckTheshold = new javax.swing.JCheckBox();
        edgeTextThreshold = new javax.swing.JTextField();
        edgeCheckLaplacian = new javax.swing.JCheckBox();
        edgeCheckKirsh = new javax.swing.JCheckBox();
        edgeCheckCanny = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        segmentCheckContour = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        segmentTextContourThreshold = new javax.swing.JTextField();
        segementCheckHistogramSmoothening = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        segmentTextHistogramWidth = new javax.swing.JTextField();
        segementCheckIntermeans = new javax.swing.JCheckBox();
        segmentTextIntermeansThreashold = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        segmentTextIntermeansIterations = new javax.swing.JTextField();
        segmentLabelIntermeansSol = new javax.swing.JLabel();
        segmentCheckHough = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        representCheckChainCode = new javax.swing.JCheckBox();
        representCheckRunCodes = new javax.swing.JCheckBox();
        presentationLabelArea = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        buttonApply = new javax.swing.JButton();
        buttonRevert = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        lblAnimation = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image comparison based automatic mockup validation framework");
        setBackground(new java.awt.Color(102, 102, 102));

        panelOld.setBackground(new java.awt.Color(102, 102, 102));
        panelOld.setPreferredSize(new java.awt.Dimension(426, 266));

        org.jdesktop.layout.GroupLayout panelOldLayout = new org.jdesktop.layout.GroupLayout(panelOld);
        panelOld.setLayout(panelOldLayout);
        panelOldLayout.setHorizontalGroup(
            panelOldLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        panelOldLayout.setVerticalGroup(
            panelOldLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        panelNew.setBackground(new java.awt.Color(102, 102, 102));
        panelNew.setPreferredSize(new java.awt.Dimension(426, 266));

        org.jdesktop.layout.GroupLayout panelNewLayout = new org.jdesktop.layout.GroupLayout(panelNew);
        panelNew.setLayout(panelNewLayout);
        panelNewLayout.setHorizontalGroup(
            panelNewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        panelNewLayout.setVerticalGroup(
            panelNewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 266, Short.MAX_VALUE)
        );

        jLabel1.setText("Original Image");

        jLabel2.setText("Modified Image");

        pointCheckRotateLeft.setText("Rotate Left");

        pointCheckFlipVertical.setText("Flip vertical");

        jLabel6.setText("X");

        jLabel7.setText("Y");

        jLabel8.setText("Width");

        jLabel9.setText("Height");

        pointCropX.setText("0");

        pointCropY.setText("0");

        pointCropWidth.setText("100");
        pointCropWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointCropWidthActionPerformed(evt);
            }
        });

        pointCropHeight.setText("100");
        pointCropHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointCropHeightActionPerformed(evt);
            }
        });

        pointCheckCrop.setText("Crop (Fill below fields)");
        pointCheckCrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointCheckCropActionPerformed(evt);
            }
        });

        pointCheckNegative.setText("Negative");

        pointCheckNormalize.setText("Normalize");

        pointCheckGrayscale.setText("Grayscale");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pointCheckRotateLeft)
                    .add(pointCheckFlipVertical))
                .add(48, 48, 48)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pointCheckNormalize)
                    .add(pointCheckNegative)
                    .add(pointCheckGrayscale))
                .add(71, 71, 71)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pointCropY))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pointCropX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(pointCropWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(9, 9, 9)
                                .add(pointCropHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(pointCheckCrop))
                .addContainerGap(416, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(pointCheckNegative)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pointCheckNormalize)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pointCheckGrayscale))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(pointCheckRotateLeft)
                            .add(pointCheckCrop))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pointCheckFlipVertical)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel6)
                                    .add(pointCropX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel7)
                                    .add(pointCropY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel8)
                                    .add(pointCropWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel9)
                                    .add(pointCropHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Point Opertions", jPanel2);

        jLabel3.setText("Width");

        jLabel4.setText("Height");

        scaleTextWidth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        scaleTextWidth.setText("0");
        scaleTextWidth.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        scaleTextWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleTextWidthActionPerformed(evt);
            }
        });

        scaleTextHeight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        scaleTextHeight.setText("0");

        scaleCheckNearestNeighbour.setText("Nearest Neighbour");

        scaleCheckBilinear.setText("Bilinear Interpolation");

        scaleCheckBiCubic.setText("Bicubic Interpolation");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(scaleCheckBiCubic)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(scaleCheckNearestNeighbour)
                            .add(scaleCheckBilinear))
                        .add(34, 34, 34)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(scaleTextHeight)
                            .add(scaleTextWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(571, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(scaleCheckNearestNeighbour)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(scaleCheckBilinear))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(scaleTextWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(scaleTextHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(7, 7, 7)
                .add(scaleCheckBiCubic)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Resampling", jPanel1);

        noiseCheckMean3.setText("Mean Filtering 3x3");
        noiseCheckMean3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noiseCheckMean3ActionPerformed(evt);
            }
        });

        noiseCheckMean5.setText("Mean Filtering 5x5 (Gaussian mask)");

        noiseCheckThreshold.setText("Theashold Avg");

        noiseTextThreshold.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        noiseTextThreshold.setText("50");

        noiseCheckMedian.setText("Median filter (3x3 window)");

        noiseCheckMedianWeighted.setText("Weighted Median filter (5x5 horizontal)");

        noiseCheckAlphaTrimmed.setText("Alpha trimmed filter  P=");

        noiseCheckMid.setText("Mid point filter");

        noiseCheckMax.setText("Max filter");

        noiseCheckMin.setText("Min filter");

        noiseTextAlphaP.setText("2");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(noiseCheckMean3)
                    .add(noiseCheckMean5)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(noiseCheckThreshold)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(noiseTextThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(41, 41, 41)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(noiseCheckMedian)
                    .add(noiseCheckMedianWeighted)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(noiseCheckAlphaTrimmed)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(noiseTextAlphaP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(48, 48, 48)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(noiseCheckMin)
                    .add(noiseCheckMax)
                    .add(noiseCheckMid))
                .addContainerGap(261, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(noiseCheckMean3)
                    .add(noiseCheckMedian)
                    .add(noiseCheckMid))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(noiseCheckMean5)
                    .add(noiseCheckMedianWeighted)
                    .add(noiseCheckMax))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(noiseCheckThreshold)
                        .add(noiseTextThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(noiseCheckAlphaTrimmed)
                        .add(noiseTextAlphaP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(noiseCheckMin))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Noise Reduction", jPanel3);

        edgeCheckSobelX.setText("Sobel Operator X axis");
        edgeCheckSobelX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeCheckSobelXActionPerformed(evt);
            }
        });

        edgeCheckSobelY.setText("Sobel Operator Y axis");

        edgeSobelBoth.setText("Sobel Operator both axes");
        edgeSobelBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeSobelBothActionPerformed(evt);
            }
        });

        edgeCheckTheshold.setText("Use threshold");

        edgeTextThreshold.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        edgeTextThreshold.setText("100");

        edgeCheckLaplacian.setText("Laplacian Operator");

        edgeCheckKirsh.setText("Kirsch edge templates");
        edgeCheckKirsh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeCheckKirshActionPerformed(evt);
            }
        });

        edgeCheckCanny.setText("Canny");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(edgeCheckSobelY)
                    .add(edgeSobelBoth)
                    .add(edgeCheckSobelX))
                .add(32, 32, 32)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(edgeCheckKirsh)
                            .add(edgeCheckLaplacian))
                        .add(26, 26, 26)
                        .add(edgeCheckTheshold)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(edgeTextThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(edgeCheckCanny))
                .addContainerGap(345, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(23, 23, 23)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(edgeCheckLaplacian)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(edgeCheckKirsh))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(edgeCheckSobelX)
                            .add(edgeCheckTheshold)
                            .add(edgeTextThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(edgeCheckSobelY)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(edgeSobelBoth)
                            .add(edgeCheckCanny))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Edge Detection", jPanel4);

        segmentCheckContour.setText("Contour tracking T=");

        jLabel5.setText("Apply Edge detection algorithms before");

        segmentTextContourThreshold.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        segmentTextContourThreshold.setText("200");

        segementCheckHistogramSmoothening.setText("Histogram smoothening Width=");

        jLabel10.setText("using any segmentation method");

        segmentTextHistogramWidth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        segmentTextHistogramWidth.setText("3");

        segementCheckIntermeans.setText("Intermeans Algorithm(Optimal Threshold)");

        segmentTextIntermeansThreashold.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        segmentTextIntermeansThreashold.setText("150");

        jLabel11.setText("Solution");

        jLabel12.setText("initial T=");

        jLabel13.setText("iterations=");

        segmentTextIntermeansIterations.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        segmentTextIntermeansIterations.setText("10");

        segmentLabelIntermeansSol.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        segmentLabelIntermeansSol.setText(" ");

        segmentCheckHough.setText("Hough Transform (Line detection)");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(segmentCheckContour)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(segmentTextContourThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 198, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(segmentCheckHough))
                .add(45, 45, 45)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(segementCheckIntermeans)
                        .add(57, 57, 57)
                        .add(segementCheckHistogramSmoothening)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(segmentTextHistogramWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel13)
                            .add(jLabel12)
                            .add(jLabel11))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(segmentTextIntermeansThreashold)
                            .add(segmentTextIntermeansIterations)
                            .add(segmentLabelIntermeansSol, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(segementCheckHistogramSmoothening)
                                .add(segmentTextHistogramWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(segementCheckIntermeans))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(segmentTextIntermeansThreashold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel13)
                            .add(segmentTextIntermeansIterations, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel11)
                            .add(segmentLabelIntermeansSol)))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(segmentCheckContour)
                            .add(segmentTextContourThreshold, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(segmentCheckHough)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Segmentation", jPanel5);

        representCheckChainCode.setText("Chain code (Will apply contour tracking)");

        representCheckRunCodes.setText("Run code (Will apply contour tracking, Need black background binary image)");

        presentationLabelArea.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        presentationLabelArea.setText("0");

        jLabel14.setText("Area using run code= ");

        jLabel15.setText("Apply Edge detection algorithms before using any segmentation method");

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel15)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(presentationLabelArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(representCheckRunCodes)
                    .add(representCheckChainCode))
                .addContainerGap(451, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(representCheckChainCode)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(representCheckRunCodes)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(presentationLabelArea)
                    .add(jLabel14))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanel.addTab("Representation", jPanel6);

        buttonApply.setText("Apply");
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        buttonRevert.setText("Revert");
        buttonRevert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRevertActionPerformed(evt);
            }
        });

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblStatus.setText("Status");

        lblAnimation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dinu/res/loading_transparent.gif"))); // NOI18N

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setText("Point operations");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Resampling");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Noise Reduction");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Edge detection");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Segmentation");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Representation");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(panelOld, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(panelNew, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(191, 191, 191)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel2)
                .add(187, 187, 187))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(tabPanel)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(34, 34, 34)
                .add(buttonApply, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buttonRevert, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(lblAnimation)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(panelNew, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(panelOld, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonApply, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(buttonRevert, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(lblAnimation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        saveImage();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try {
            finalize();
        } catch (Throwable ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        openImage();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void scaleTextWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleTextWidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scaleTextWidthActionPerformed

    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed

        if (modifiedImage != null) {

            setStatus("Applying", true);
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                public Void doInBackground() {
                    doOperation();
                    return null;
                }

                @Override
                public void done() {
                    updateUI();
                    setStatus("Finished", false);
                    buttonApply.setEnabled(true);
                }
            };
            worker.execute();
        }else{
            JOptionPane.showMessageDialog(this, "Open an image first before applying", "No image", JOptionPane.INFORMATION_MESSAGE);
            openImage();
        }

    }//GEN-LAST:event_buttonApplyActionPerformed

    private void pointCropHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointCropHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointCropHeightActionPerformed

    private void pointCropWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointCropWidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointCropWidthActionPerformed

    private void pointCheckCropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointCheckCropActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointCheckCropActionPerformed

    private void buttonRevertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRevertActionPerformed
        modifiedImage = ImageUtil.duplicateImage(originalImage);
        updateUI();
    }//GEN-LAST:event_buttonRevertActionPerformed

    private void noiseCheckMean3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noiseCheckMean3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noiseCheckMean3ActionPerformed

    private void edgeCheckSobelXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeCheckSobelXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgeCheckSobelXActionPerformed

    private void edgeSobelBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeSobelBothActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgeSobelBothActionPerformed

    private void edgeCheckKirshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeCheckKirshActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgeCheckKirshActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        setTab(0);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        setTab(3);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        setTab(1);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        setTab(2);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        setTab(4);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        setTab(5);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private void setStatus(String status, boolean isBusy) {
        lblStatus.setText(status + (isBusy ? "..." : "."));
        lblAnimation.setVisible(isBusy);
        buttonApply.setEnabled(!isBusy);
        buttonRevert.setEnabled(!isBusy);
    }
    
    private void setTab(int index){
        if(tabPanel.getTabCount() > index){
            tabPanel.setSelectedIndex(index);
        }
        
    }

    private void doOperation() {
        int index = tabPanel.getSelectedIndex();
        boolean isSelected = false;
        switch (index) {
            case 0:
                if (pointCheckRotateLeft.isSelected()) {
                    setStatus("Rotating left", true);
                    pointOpRotate();
                    isSelected = true;
                }
                if (pointCheckFlipVertical.isSelected()) {
                    setStatus("Flipping vertical", true);
                    pointOpFlipVertical();
                    isSelected = true;
                }
                if (pointCheckCrop.isSelected()) {
                    setStatus("Cropping", true);
                    pointOpCrop();
                    isSelected = true;
                }
                if (pointCheckNegative.isSelected()) {
                    setStatus("Changing to negative", true);
                    pointOpNegative();
                    isSelected = true;
                }
                if (pointCheckNormalize.isSelected()) {
                    setStatus("Normalizing", true);
                    pointOpNormalize();
                    isSelected = true;
                }
                if (pointCheckGrayscale.isSelected()) {
                    setStatus("Changing to grayscale", true);
                    pointOpGrayscale();
                    isSelected = true;
                }
                break;
            case 1:
                if (scaleCheckNearestNeighbour.isSelected()) {
                    setStatus("Applying Nearest neighbout method", true);
                    scaleImageNearestNeighbour();
                    isSelected = true;
                }
                if (scaleCheckBilinear.isSelected()) {
                    setStatus("Applying Bilinear scale", true);
                    scaleImageBilinear();
                    isSelected = true;
                }
                if (scaleCheckBiCubic.isSelected()) {
                    setStatus("Applying Bicubic", true);
                    scaleImageBicubic();
                    isSelected = true;
                }
                break;
            case 2:
                if (noiseCheckMean3.isSelected()) {
                    setStatus("Applying Mean filter 3x3", true);
                    noiseMean3x3();
                    isSelected = true;
                }
                if (noiseCheckMean5.isSelected()) {
                    setStatus("Applying Gaussian mask", true);
                    noiseMean5x5();
                    isSelected = true;
                }
                if (noiseCheckThreshold.isSelected()) {
                    setStatus("Applying Threshold averaging", true);
                    noiseThreshold();
                    isSelected = true;
                }
                if (noiseCheckMedian.isSelected()) {
                    setStatus("Applying Median filter 3x3", true);
                    noiseMedian();
                    isSelected = true;
                }
                if (noiseCheckMedianWeighted.isSelected()) {
                    setStatus("Applying Weighted median filter 5x5 horizontal", true);
                    noiseMedianWeighted();
                    isSelected = true;
                }
                if (noiseCheckAlphaTrimmed.isSelected()) {
                    setStatus("Applying Alpha trimmed filter", true);
                    noiseAlphaTrimed();
                    isSelected = true;
                }
                if (noiseCheckMid.isSelected()) {
                    setStatus("Applying Mid point filter", true);
                    noiseMedianMid();
                    isSelected = true;
                }
                if (noiseCheckMax.isSelected()) {
                    setStatus("Applying Max filter", true);
                    noiseMedianMax();
                    isSelected = true;
                }
                if (noiseCheckMin.isSelected()) {
                    setStatus("Applying Min filter", true);
                    noiseMedianMin();
                    isSelected = true;
                }
                break;

            case 3:
                if (edgeCheckSobelX.isSelected()) {
                    setStatus("Applying Sobel operator in X-axis", true);
                    edgeSobelX();
                    isSelected = true;
                }
                if (edgeCheckSobelY.isSelected()) {
                    setStatus("Applying Sobel operator in Y-axis", true);
                    edgeSobelY();
                    isSelected = true;
                }
                if (edgeSobelBoth.isSelected()) {
                    setStatus("Applying Sobel operator in both axes", true);
                    edgeSobelBoth();
                    isSelected = true;
                }
                if (edgeCheckLaplacian.isSelected()) {
                    setStatus("Applying Laplacian operator", true);
                    edgeLaplacian();
                    isSelected = true;
                }
                if (edgeCheckKirsh.isSelected()) {
                    setStatus("Applying Kirsch edge templates", true);
                    edgeKirsh();
                    isSelected = true;
                }
                if (edgeCheckCanny.isSelected()) {
                    setStatus("Applying Canny edge detector", true);
                    edgeCanny();
                    isSelected = true;
                }
                if (edgeCheckTheshold.isSelected()) {
                    setStatus("Thresholding image", true);
                    edgeUseThreshold();
                    isSelected = true;
                }
                break;

            case 4:
                if (segmentCheckContour.isSelected()) {
                    setStatus("Segment using Contour tracking ", true);
                    segementContour();
                    isSelected = true;
                }
                if (segmentCheckHough.isSelected()) {
                    setStatus("Line segment detection using Contour tracking ", true);
                    segmentHoughTransform();
                    isSelected = true;
                }
                if (segementCheckIntermeans.isSelected()) {
                    setStatus("Calculating optimal threshold using intermeans algorithm", true);
                    segementIntermeans();
                    isSelected = true;
                }
                if (segementCheckHistogramSmoothening.isSelected()) {
                    setStatus("Histogram smoothening", true);
                    segmentHistogramSmooth();
                    isSelected = true;
                }

                break;

            case 5:
                if (representCheckChainCode.isSelected()) {
                    setStatus("Representation in Chain codes", true);
                    representChainCodes();
                    isSelected = true;
                }
                if (representCheckRunCodes.isSelected()) {
                    setStatus("Representation in Run codes", true);
                    representRunCodes();
                    isSelected = true;
                }
            default:
                break;
        }
        
        if(!isSelected){
            JOptionPane.showMessageDialog(this, "Select at least one operation to apply", "No operation selected", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void scaleImageNearestNeighbour() {
        int width = Integer.valueOf(scaleTextWidth.getText());
        int height = Integer.valueOf(scaleTextHeight.getText());
        modifiedImage = ImageUtil.scaleImageNearestNeighbour(modifiedImage, width, height);
    }

    private void scaleImageBilinear() {
        int width = Integer.valueOf(scaleTextWidth.getText());
        int height = Integer.valueOf(scaleTextHeight.getText());
        modifiedImage = ImageUtil.scaleImageBilinear(modifiedImage, width, height);
    }

    private void scaleImageBicubic() {
        int width = Integer.valueOf(scaleTextWidth.getText());
        int height = Integer.valueOf(scaleTextHeight.getText());
        modifiedImage = ImageUtil.scaleImageBicubic(modifiedImage, width, height);
    }

    private void pointOpRotate() {
        modifiedImage = PointOperation.transpose(modifiedImage);
    }

    private void pointOpFlipVertical() {
        modifiedImage = PointOperation.flipVertical(modifiedImage);
    }

    private void pointOpCrop() {
        int x = Integer.valueOf(pointCropX.getText());
        int y = Integer.valueOf(pointCropY.getText());
        int width = Integer.valueOf(pointCropWidth.getText());
        int height = Integer.valueOf(pointCropHeight.getText());
        modifiedImage = PointOperation.crop(modifiedImage, x, y, width, height);
    }

    private void pointOpNegative() {
        modifiedImage = PointOperation.negative(modifiedImage);
    }

    private void pointOpNormalize() {
        modifiedImage = PointOperation.normalize(modifiedImage);
    }

    private void pointOpGrayscale() {
        modifiedImage = PointOperation.averageGrayscale(modifiedImage);
    }

    private void noiseMean3x3() {
        modifiedImage = NoiseReduction.filterMean(modifiedImage, NoiseReduction.mask3);
    }

    private void noiseMean5x5() {
        modifiedImage = NoiseReduction.filterMean(modifiedImage, NoiseReduction.mask5);
    }

    private void noiseThreshold() {
        int threshold = Integer.valueOf(noiseTextThreshold.getText());
        modifiedImage = NoiseReduction.filterThreashold(modifiedImage, threshold);
    }

    private void noiseMedian() {
        modifiedImage = NoiseReduction.filterMedian(modifiedImage, NoiseReduction.maskMean);
    }

    private void noiseMedianWeighted() {
        modifiedImage = NoiseReduction.filterMedian(modifiedImage, NoiseReduction.maskMedianHorizontal);
    }

    private void noiseMedianMid() {
        modifiedImage = NoiseReduction.filterMedian(modifiedImage, NoiseReduction.maskMean, NoiseReduction.MedianModel.MID);
    }

    private void noiseMedianMin() {
        modifiedImage = NoiseReduction.filterMedian(modifiedImage, NoiseReduction.maskMean, NoiseReduction.MedianModel.MIN);
    }

    private void noiseMedianMax() {
        modifiedImage = NoiseReduction.filterMedian(modifiedImage, NoiseReduction.maskMean, NoiseReduction.MedianModel.MAX);
    }

    private void noiseAlphaTrimed() {
        int p = Integer.valueOf(noiseTextAlphaP.getText());
        modifiedImage = NoiseReduction.filterAlphaTrimmed(modifiedImage, p);
    }

    private void edgeSobelX() {
        modifiedImage = EdgeDetection.applyEdgeDetection(modifiedImage, EdgeDetection.maskSobelX);
    }

    private void edgeSobelY() {
        modifiedImage = EdgeDetection.applyEdgeDetection(modifiedImage, EdgeDetection.maskSobelY);
    }

    private void edgeSobelBoth() {
        modifiedImage = EdgeDetection.applySobelBoth(modifiedImage);
    }

    private void edgeCanny() {
        modifiedImage = CannyEdgeDetector.applyCannyEdgeDetector(modifiedImage);
    }

    private void edgeUseThreshold() {
        int threshold = Integer.valueOf(edgeTextThreshold.getText());
        modifiedImage = EdgeDetection.applyThreshold(modifiedImage, threshold);
    }

    private void edgeLaplacian() {
        modifiedImage = EdgeDetection.applyEdgeDetection(modifiedImage, EdgeDetection.maskLaplacian);
    }

    private void edgeKirsh() {
        modifiedImage = EdgeDetection.applyKirsch(modifiedImage);
    }

    private void segementContour() {
        int threshold = Integer.valueOf(segmentTextContourThreshold.getText());
        Segmentation.THRESHOLD = threshold;
        modifiedImage = Segmentation.segmentContour(modifiedImage);
    }

    private void segmentHoughTransform() {
        HoughTransform.applyHoughTransform(modifiedImage);
    }

    private void segmentHistogramSmooth() {
        int width = Integer.valueOf(segmentTextHistogramWidth.getText());
        Histogram.showHistogram(modifiedImage);
        Histogram.showHistogramSmoothen(modifiedImage, width);
    }

    private void segementIntermeans() {
        int threshold = Integer.valueOf(segmentTextIntermeansThreashold.getText());
        int iterations = Integer.valueOf(segmentTextIntermeansIterations.getText());

//        modifiedImage = PointOperation.averageGrayscale(modifiedImage);

        Histogram histo = new Histogram();
        histo.load(modifiedImage);

        if (segementCheckHistogramSmoothening.isSelected()) {
            int width = Integer.valueOf(segmentTextHistogramWidth.getText());
            histo.smoothen(width);
        }

        int newThreshold = histo.doIntermeans(threshold, iterations);

        segmentLabelIntermeansSol.setText(String.valueOf(newThreshold));
    }

    private void representChainCodes() {
        Segmentation.THRESHOLD = 128;
        modifiedImage = Representation.chainCodes(modifiedImage);
        showCodes(Representation.chainCode,this.getX(),this.getY());
    }

    private void representRunCodes() {
        long area = Representation.applyRunCodes(modifiedImage);
        presentationLabelArea.setText(String.valueOf(area));
    }

    private void openImage() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Images (jpg, gif, png, bmp)", "jpg", "gif", "png", "bmp");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File("."));
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            originalImage = ImageStorage.openImage(path);
            modifiedImage = ImageUtil.duplicateImage(originalImage);

            scaleTextWidth.setText(String.valueOf(originalImage.getWidth()));
            scaleTextHeight.setText(String.valueOf(originalImage.getHeight()));

            new ImageViewer(originalImage, panelOld);
            updateUI();
            repaint();
        }
    }

    private void saveImage() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter1 = new FileNameExtensionFilter(
                "JPEG (jpg)", "jpg");
        FileNameExtensionFilter filter2 = new FileNameExtensionFilter(
                "PNG (png)", "png");
        FileNameExtensionFilter filter3 = new FileNameExtensionFilter(
                "GIF (gif)", "gif");

        fileChooser.addChoosableFileFilter(filter1);
        fileChooser.addChoosableFileFilter(filter2);
        fileChooser.addChoosableFileFilter(filter3);
        fileChooser.setCurrentDirectory(new File("."));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(filter1);

        if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            String type = ((FileNameExtensionFilter) (fileChooser.getFileFilter())).getExtensions()[0];
            if (type == null) {
                type = "jpg";
            }
            path = path + "." + type;
            if (ImageStorage.saveImage(modifiedImage, path, type)) {
                JOptionPane.showMessageDialog(this, "File " + path + " saved successfully", "File Save", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Unable to save file", "File Save", JOptionPane.ERROR_MESSAGE);
            }

            repaint();
        }
    }

    private static void showCodes(String codes,int x, int y) {
        if (jFrameChain != null) {
            jFrameChain.setVisible(false);
        }
        jFrameChain = new JFrame();
        GridLayout grid = new GridLayout(8, 1);
        jFrameChain.setLayout(grid);

        jFrameChain.add(new JLabel("Chain code"));

        JTextArea jTextArea1 = new JTextArea();
        jTextArea1.setLineWrap(true);
        jTextArea1.setText(codes);
        jFrameChain.add(jTextArea1);

        jFrameChain.add(new JLabel("Normalize starting point"));
        JTextArea jTextArea2 = new JTextArea();
        jTextArea2.setLineWrap(true);
        jTextArea2.setText(Representation.normalizeStartingPoint(codes));
        jFrameChain.add(jTextArea2);

        jFrameChain.add(new JLabel("Normalize rotation"));
        JTextArea jTextArea3 = new JTextArea();
        jTextArea3.setLineWrap(true);
        jTextArea3.setText(Representation.normalizeRotation(codes));
        jFrameChain.add(jTextArea3);

        double perimeter = Representation.calculatePerimeter(codes);
        double area = Representation.calculateArea(codes);
        double compactness = Representation.calculateCompactness(perimeter, area);

        StringBuilder sb = new StringBuilder();
        sb.append("Perimeter = " + String.valueOf(perimeter) + "\n");
        sb.append("Area=" + String.valueOf(area) + "\n");
        sb.append("Compactness=" + String.valueOf(compactness) + "\n");

        jFrameChain.add(new JLabel("Calculations:"));
        JTextArea jTextArea4 = new JTextArea();
        jTextArea4.setLineWrap(true);
        jTextArea4.setText(sb.toString());
        jFrameChain.add(jTextArea4);

        
        
        jFrameChain.setBounds( x+ 200, y + 50, 700, 600);
        jFrameChain.setTitle("8-Directional chain code");
        jFrameChain.setVisible(true);
    }

    private void updateUI() {
        new ImageViewer(modifiedImage, panelNew);
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApply;
    private javax.swing.JButton buttonRevert;
    private javax.swing.JCheckBox edgeCheckCanny;
    private javax.swing.JCheckBox edgeCheckKirsh;
    private javax.swing.JCheckBox edgeCheckLaplacian;
    private javax.swing.JCheckBox edgeCheckSobelX;
    private javax.swing.JCheckBox edgeCheckSobelY;
    private javax.swing.JCheckBox edgeCheckTheshold;
    private javax.swing.JCheckBox edgeSobelBoth;
    private javax.swing.JTextField edgeTextThreshold;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblAnimation;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JCheckBox noiseCheckAlphaTrimmed;
    private javax.swing.JCheckBox noiseCheckMax;
    private javax.swing.JCheckBox noiseCheckMean3;
    private javax.swing.JCheckBox noiseCheckMean5;
    private javax.swing.JCheckBox noiseCheckMedian;
    private javax.swing.JCheckBox noiseCheckMedianWeighted;
    private javax.swing.JCheckBox noiseCheckMid;
    private javax.swing.JCheckBox noiseCheckMin;
    private javax.swing.JCheckBox noiseCheckThreshold;
    private javax.swing.JTextField noiseTextAlphaP;
    private javax.swing.JTextField noiseTextThreshold;
    private javax.swing.JPanel panelNew;
    private javax.swing.JPanel panelOld;
    private javax.swing.JCheckBox pointCheckCrop;
    private javax.swing.JCheckBox pointCheckFlipVertical;
    private javax.swing.JCheckBox pointCheckGrayscale;
    private javax.swing.JCheckBox pointCheckNegative;
    private javax.swing.JCheckBox pointCheckNormalize;
    private javax.swing.JCheckBox pointCheckRotateLeft;
    private javax.swing.JTextField pointCropHeight;
    private javax.swing.JTextField pointCropWidth;
    private javax.swing.JTextField pointCropX;
    private javax.swing.JTextField pointCropY;
    private javax.swing.JLabel presentationLabelArea;
    private javax.swing.JCheckBox representCheckChainCode;
    private javax.swing.JCheckBox representCheckRunCodes;
    private javax.swing.JCheckBox scaleCheckBiCubic;
    private javax.swing.JCheckBox scaleCheckBilinear;
    private javax.swing.JCheckBox scaleCheckNearestNeighbour;
    private javax.swing.JTextField scaleTextHeight;
    private javax.swing.JTextField scaleTextWidth;
    private javax.swing.JCheckBox segementCheckHistogramSmoothening;
    private javax.swing.JCheckBox segementCheckIntermeans;
    private javax.swing.JCheckBox segmentCheckContour;
    private javax.swing.JCheckBox segmentCheckHough;
    private javax.swing.JLabel segmentLabelIntermeansSol;
    private javax.swing.JTextField segmentTextContourThreshold;
    private javax.swing.JTextField segmentTextHistogramWidth;
    private javax.swing.JTextField segmentTextIntermeansIterations;
    private javax.swing.JTextField segmentTextIntermeansThreashold;
    private javax.swing.JTabbedPane tabPanel;
    // End of variables declaration//GEN-END:variables
}
